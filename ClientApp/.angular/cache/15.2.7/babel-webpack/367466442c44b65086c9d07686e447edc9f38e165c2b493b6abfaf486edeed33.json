{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet BookFlightComponent = class BookFlightComponent {\n  constructor(route, router, flightService, authService, fb) {\n    this.route = route;\n    this.router = router;\n    this.flightService = flightService;\n    this.authService = authService;\n    this.fb = fb;\n    this.flightId = 'not loaded';\n    this.flight = {};\n    this.form = this.fb.group({\n      number: [1, Validators.required]\n    });\n    this.findFlight = flightId => {\n      this.flightId = flightId ?? 'not passed';\n      this.flightService.findFlight({\n        id: this.flightId\n      }).subscribe(flight => this.flight = flight, this.handleError);\n    };\n    // In  typescript, we also have first class function citizenship which can be used to assign methods in variable and even a function to another function\n    this.handleError = err => {\n      if (err.status == 404) {\n        alert(\"Flight not found!\");\n        this.router.navigate(['/search-flights']);\n      }\n      console.log(\"Response Error. Status: \", err.status);\n      console.log(\"Response Error. Status Text: \", err.statusText);\n      console.log(err);\n    };\n  }\n  ngOnInit() {\n    if (!this.authService.currentUser) this.router.navigate(['/register-passenger']);\n    this.route.paramMap.subscribe(p => this.findFlight(p.get(\"flightId\")));\n  }\n  book() {\n    if (this.form.invalid) {\n      return;\n    }\n    const numberOfPassengers = this.form.get('number')?.value;\n    if (numberOfPassengers !== null && numberOfPassengers !== undefined) {\n      console.log(`Booking ${numberOfPassengers} passengers for the flight: ${this.flight.id}`);\n      const booking = {\n        flightId: this.flight.id,\n        passengerEmail: this.authService.currentUser?.email,\n        numberOfSeats: numberOfPassengers\n      };\n      this.flightService.bookFlight({\n        body: booking\n      }).subscribe(_ => this.router.navigate(['/my-booking']), this.handleError);\n    } else {\n      console.error(\"Number of passengers is null or undefined\");\n    }\n  }\n};\nBookFlightComponent = __decorate([Component({\n  selector: 'app-book-flight',\n  templateUrl: './book-flight.component.html',\n  styleUrls: ['./book-flight.component.css']\n})], BookFlightComponent);\nexport { BookFlightComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","BookFlightComponent","constructor","route","router","flightService","authService","fb","group","number","required","flightId","findFlight","id","subscribe","flight","handleError","err","status","alert","navigate","console","log","statusText","ngOnInit","currentUser","paramMap","p","get","book","form","invalid","numberOfPassengers","value","undefined","booking","passengerEmail","email","numberOfSeats","bookFlight","body","_","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["F:\\Angular with .NET\\Projects\\FlightsBookingSystem\\ClientApp\\src\\app\\book-flight\\book-flight.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FlightService } from './../api/services/flight.service';\r\nimport { BookDto, FlightRm } from '../api/models';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { FormBuilder, Validators } from '@angular/forms'\r\n \r\n@Component({\r\n  selector: 'app-book-flight',\r\n  templateUrl: './book-flight.component.html',\r\n  styleUrls: ['./book-flight.component.css']\r\n})\r\nexport class BookFlightComponent implements OnInit {\r\n\r\n  constructor(private route: ActivatedRoute,\r\n    private router:Router,\r\n    private flightService: FlightService,\r\n    private authService: AuthService,\r\n    private fb: FormBuilder) { }\r\n\r\n  flightId: string = 'not loaded';\r\n  flight: FlightRm = {}\r\n\r\n  form = this.fb.group({\r\n    number: [1, Validators.required]\r\n  })\r\n\r\n  ngOnInit(): void {\r\n    if (!this.authService.currentUser)\r\n       this.router.navigate(['/register-passenger'])\r\n\r\n    this.route.paramMap\r\n      .subscribe(p=>this.findFlight(p.get(\"flightId\")))\r\n  }\r\n\r\n  private findFlight = (flightId: string | null) => {\r\n    this.flightId = flightId ?? 'not passed';\r\n\r\n    this.flightService.findFlight({ id: this.flightId })\r\n    .subscribe(flight=>this.flight = flight, this.handleError)\r\n  }\r\n\r\n  // In  typescript, we also have first class function citizenship which can be used to assign methods in variable and even a function to another function\r\n\r\n  private handleError = (err: any) => {\r\n\r\n    if (err.status == 404) {\r\n      alert(\"Flight not found!\")\r\n      this.router.navigate(['/search-flights'])\r\n    }\r\n\r\n    console.log(\"Response Error. Status: \", err.status)\r\n    console.log(\"Response Error. Status Text: \", err.statusText)\r\n    console.log(err)\r\n  }\r\n\r\n  book() {\r\n\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n\r\n    const numberOfPassengers = this.form.get('number')?.value;\r\n\r\n    if (numberOfPassengers !== null && numberOfPassengers !== undefined) {\r\n      console.log(`Booking ${numberOfPassengers} passengers for the flight: ${this.flight.id}`);\r\n\r\n      const booking: BookDto = {\r\n        flightId: this.flight.id,\r\n        passengerEmail: this.authService.currentUser?.email,\r\n        numberOfSeats: numberOfPassengers,\r\n      };\r\n\r\n      this.flightService.bookFlight({ body: booking })\r\n        .subscribe(_ => this.router.navigate(['/my-booking']), this.handleError);\r\n    } else {\r\n      console.error(\"Number of passengers is null or undefined\");\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}